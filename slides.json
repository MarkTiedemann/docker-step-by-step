["> README.md\r\n|\r\n# <b># docker-step-by-step</b>\r\n|\r\n| | Hands-on docker tutorial.\r\n|\r\n| Live demo @ <a\\whref=\"https://marktiedemann.github.io/docker-step-by-step\">marktiedemann.github.io/docker-step-by-step</a>.\r\n|\r\n|\r\n# <b>## License</b>\r\n|\r\n| <a\\whref=\"http://www.wtfpl.net/\">WTFPL</a> – Do What the F*ck You Want to Public License.\r\n|\r\n| Made with ❤ by <a\\whref=\"https://twitter.com/MarkTiedemannDE\">@MarkTiedemann</a>.","$ ./1-INTRO\r\n|\r\n+ # Characteristics","$ ./1-INTRO\r\n|\r\n# # Characteristics\r\n+ # Architecture","$ ./1-INTRO\r\n|\r\n# # Characteristics\r\n# # Architecture\r\n+ # Lifecycle","$ ./1-INTRO\r\n|\r\n# # Characteristics\r\n# # Architecture\r\n# # Lifecycle\r\n|\r\n|\r\n$ ./2-TUTORIAL\r\n|\r\n+ # Build a service.","$ ./1-INTRO\r\n|\r\n# # Characteristics\r\n# # Architecture\r\n# # Lifecycle\r\n|\r\n|\r\n$ ./2-TUTORIAL\r\n|\r\n# # Build a service.\r\n+ # Dockerize the service.","$ ./1-INTRO\r\n|\r\n+ # Characteristics","$ ./1-INTRO\r\n|\r\n# # Characteristics\r\n|\r\n# - Isolation:\r\n+   Makes applications resource-isolated (different kernel\r\n+   namespaces, overlay file system)","$ ./1-INTRO\r\n|\r\n# # Characteristics\r\n|\r\n# - Isolation:\r\n|   Makes applications resource-isolated (different kernel\r\n|   namespaces, overlay file system)\r\n|\r\n# - Portability:\r\n+   Makes applications operating system and hardware independent","$ ./1-INTRO\r\n|\r\n# # Characteristics\r\n|\r\n# - Isolation:\r\n|   Makes applications resource-isolated (different kernel\r\n|   namespaces, overlay file system)\r\n|\r\n# - Portability:\r\n|   Makes applications operating system and hardware independent\r\n|\r\n# - Predictability:\r\n+   Allows you to package an application and its dependencies in\r\n+   a reproducable way","$ ./1-INTRO\r\n|\r\n# # Characteristics\r\n|\r\n# - Isolation:\r\n|   Makes applications resource-isolated (different kernel\r\n|   namespaces, overlay file system)\r\n|\r\n# - Portability:\r\n|   Makes applications operating system and hardware independent\r\n|\r\n# - Predictability:\r\n|   Allows you to package an application and its dependencies in\r\n|   a reproducable way\r\n|\r\n# - Agility:\r\n+   Enables fast and leightweight deployment, starting and\r\n+   stopping of applications","$ ./1-INTRO\r\n|\r\n+ # Architecture","$ ./1-INTRO\r\n|\r\n# # Architecture\r\n| <img\\wsrc=\"https://docs.docker.com/engine/article-img/architecture.svg\"></img>","$ ./1-INTRO\r\n|\r\n+ # Lifecycle","$ ./1-INTRO\r\n|\r\n# # Lifecycle\r\n|\r\n# # build an image\r\n+ docker build","$ ./1-INTRO\r\n|\r\n# # Lifecycle\r\n|\r\n# # build an image\r\n$ docker build\r\n|\r\n# # create a container from an image\r\n+ docker create","$ ./1-INTRO\r\n|\r\n# # Lifecycle\r\n|\r\n# # build an image\r\n$ docker build\r\n|\r\n# # create a container from an image\r\n$ docker create\r\n|\r\n# # start a container\r\n+ docker start","$ ./1-INTRO\r\n|\r\n# # Lifecycle\r\n|\r\n# # build an image\r\n$ docker build\r\n|\r\n# # create a container from an image\r\n- docker create\r\n|\r\n# # start a container\r\n- docker start\r\n|\r\n# # create a container and start it\r\n+ docker run","$ ./1-INTRO\r\n|\r\n# # Lifecycle\r\n|\r\n# # build an image\r\n$ docker build\r\n|\r\n# # create a container and start it\r\n$ docker run\r\n|\r\n# # stop a container\r\n+ docker stop","$ ./1-INTRO\r\n|\r\n# # Lifecycle\r\n|\r\n# # build an image\r\n$ docker build\r\n|\r\n# # create a container and start it\r\n$ docker run\r\n|\r\n# # stop a container\r\n$ docker stop\r\n|\r\n# # remove a container\r\n+ docker rm","$ ./1-INTRO\r\n|\r\n# # Lifecycle\r\n|\r\n# # build an image\r\n$ docker build\r\n|\r\n# # create a container and start it\r\n$ docker run\r\n|\r\n# # stop a container\r\n$ docker stop\r\n|\r\n# # remove a container\r\n$ docker rm\r\n|\r\n# # remove an image\r\n+ docker rmi","$ ./2-TUTORIAL\r\n|\r\n+ # Create an executable in `go`.","$ ./2-TUTORIAL\r\n|\r\n# # Create an executable in `go`.\r\n+ # Write a `Dockerfile`.","$ ./2-TUTORIAL\r\n|\r\n# # Create an executable in `go`.\r\n# # Write a `Dockerfile`.\r\n+ # Implement a server in `go`.","$ ./2-TUTORIAL\r\n|\r\n# # Create an executable in `go`.\r\n# # Write a `Dockerfile`.\r\n# # Implement a server in `go`.\r\n+ # Write a multi-stage `Dockerfile`.","> main.go\r\n|\r\n+ package main","> main.go\r\n|\r\n| package main\r\n|\r\n+ import \"flag\"\r\n|\r\n+ func main() {\r\n+     addr := flag.String(\"addr\", \":3000\", \"the addr of the service\")\r\n+     flag.Parse()\r\n+ }","> main.go\r\n|\r\n| package main\r\n|\r\n- import \"flag\"\r\n+ import (\r\n+     \"flag\"\r\n+     \"log\"\r\n+ )\r\n|\r\n| func main() {\r\n|     addr := flag.String(\"addr\", \":3000\", \"the addr of the service\")\r\n|     flag.Parse()\r\n+     log.Printf(\"Listening on %s\", *addr)\r\n| }","$ go run main.go\r\n+ Listening on :3000","$ go run main.go\r\n| Listening on :3000\r\n|\r\n$ go run main.go -addr=:5000\r\n+ Listening on :5000","$ go run main.go\r\n| Listening on :3000\r\n|\r\n$ go run main.go -addr=:5000\r\n| Listening on :5000\r\n|\r\n|\r\n|\r\n# # Protip:\r\n# # Run `go fmt` to format your code.","$ ./2-TUTORIAL\r\n|\r\n+ ✔ Create an executable in `go`.\r\n# # Write a `Dockerfile`.\r\n# # Implement a server in `go`.\r\n# # Write a multi-stage `Dockerfile`.","> Dockerfile\r\n|\r\n# # Specify the image plus version\r\n+ FROM golang:1.9-alpine3.6","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n# # Specify the working directory\r\n# # in the image\r\n+ WORKDIR /service","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n# # Specify the working directory\r\n# # in the image\r\n| WORKDIR /service\r\n|\r\n|\r\n# # PS: The `WORKDIR` instruction will\r\n# #     not just `cd` but also `mkdir`\r\n# #     the specified directory.","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n# # Copy all files from your local\r\n# # working directory into the image\r\n+ COPY . .","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n# # Specify that the `ls` (list\r\n# # files) command should be run\r\n+ RUN ls","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN ls\r\n|\r\n|\r\n# # Build image\r\n$ docker build --tag my-service .","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n- RUN ls\r\n# # Let's run our code with docker!\t\\(^_^)/\r\n+ RUN go run main.go -addr=:3000","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN go run main.go -addr=:3000\r\n|\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN go run main.go -addr=:3000\r\n|\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .\r\n|\r\n# # Run container\r\n$ docker run my-service","- (╯°□°）╯︵ ┻━┻\r\n- WTF, THERE IS NO OUTPUT!","- (╯°□°）╯︵ ┻━┻\r\n- WTF, THERE IS NO OUTPUT!\r\n|\r\n# # NOTE: All instructions in the Dockerfile\r\n# #       are run at build time, <i>not</i> runtime.","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n- RUN go run main.go -addr=:3000\r\n# # Specify a command that should be passed\r\n# # to the container when it will be run\r\n+ CMD go run main.go -addr=:3000","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n- CMD go run main.go -addr=:3000\r\n# # Specify the entrypoint executable\r\n# # for the container\r\n+ ENTRYPOINT [\"go\", \"run\", \"main.go\"]\r\n# # Specify the arguments that should be\r\n# # passed to the executable\r\n+ CMD [\"-addr=:3000\"]","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n# # Build the binary\r\n+ RUN go build\r\n# # Specify the entrypoint executable\r\n# # for the container\r\n- ENTRYPOINT [\"go\", \"run\", \"main.go\"]\r\n+ ENTRYPOINT [\"./service\"]\r\n| CMD [\"-addr=:3000\"]","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN go build\r\n| ENTRYPOINT [\"./service\"]\r\n| CMD [\"-addr=:3000\"]\r\n|\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN go build\r\n| ENTRYPOINT [\"./service\"]\r\n| CMD [\"-addr=:3000\"]\r\n|\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .\r\n|\r\n# # Run container with arguments\r\n$ docker run my-service -addr=:5000","$ ./QUICK-RECAP\r\n|\r\n| - Specify at least one of <span\\wstyle=\"color:\\wmediumslateblue;\">`CMD`</span> or <span\\wstyle=\"color:\\wmediumslateblue;\">`ENTRYPOINT`</span>.\r\n|\r\n| - <span\\wstyle=\"color:\\wmediumslateblue;\">`ENTRYPOINT`</span> should be used when the container\r\n|   is run as an executable.\r\n|\r\n| - <span\\wstyle=\"color:\\wmediumslateblue;\">`CMD`</span> can be used to define default arguments\r\n|   for an <span\\wstyle=\"color:\\wmediumslateblue;\">`ENTRYPOINT`</span>.\r\n|\r\n| - <span\\wstyle=\"color:\\wmediumslateblue;\">`CMD`</span> will be overridden when running\r\n|   the container with alternative arguments.","$ ./2-TUTORIAL\r\n|\r\n# ✔ Create an executable in `go`.\r\n+ ✔ Write a `Dockerfile`.\r\n# # Implement a server in `go`.\r\n# # Write a multi-stage `Dockerfile`.","> main.go\r\n|\r\n| package main\r\n|\r\n| import (\r\n|     \"flag\"\r\n|     \"log\"\r\n+     \"net/http\"\r\n| )\r\n|\r\n| func main() {\r\n|     addr := flag.String(\"addr\", \":3000\", \"the addr of the service\")\r\n|     flag.Parse()\r\n+     http.ListenAndServe(*addr, nil)\r\n-     log.Printf(\"Listening on %s\", *addr)\r\n| }","> main.go\r\n|\r\n| package main\r\n|\r\n| import (\r\n|     \"flag\"\r\n|     \"log\"\r\n|     \"net/http\"\r\n| )\r\n|\r\n| func main() {\r\n|     addr := flag.String(\"addr\", \":3000\", \"the addr of the service\")\r\n|     flag.Parse()\r\n-     http.ListenAndServe(*addr, nil)\r\n+     log.Fatal(http.ListenAndServe(*addr, nil))\r\n|     log.Printf(\"Listening on %s\", *addr)\r\n| }","> main.go\r\n|\r\n| package main\r\n|\r\n| import (\r\n|     \"flag\"\r\n|     \"log\"\r\n|     \"net/http\"\r\n| )\r\n|\r\n| func main() {\r\n|     addr := flag.String(\"addr\", \":3000\", \"the addr of the service\")\r\n|     flag.Parse()\r\n+     http.HandleFunc(\"/\", handler)\r\n|     log.Fatal(http.ListenAndServe(*addr, nil))\r\n|     log.Printf(\"Listening on %s\", *addr)\r\n| }\r\n|\r\n+ func handler(w http.ResponseWriter, r *http.Request) {\r\n+ }","> main.go\r\n|\r\n| package main\r\n|\r\n| import (\r\n|     \"flag\"\r\n|     \"log\"\r\n|     \"net/http\"\r\n| )\r\n|\r\n| func main() {\r\n|     addr := flag.String(\"addr\", \":3000\", \"the addr of the service\")\r\n|     flag.Parse()\r\n|     http.HandleFunc(\"/\", handler)\r\n|     log.Fatal(http.ListenAndServe(*addr, nil))\r\n|     log.Printf(\"Listening on %s\", *addr)\r\n| }\r\n|\r\n| func handler(w http.ResponseWriter, r *http.Request) {\r\n+     log.Printf(\"%s %s\", r.Method, r.URL.Path)\r\n| }","> main.go\r\n|\r\n| package main\r\n|\r\n| import (\r\n|     \"flag\"\r\n|     \"fmt\"\r\n|     \"log\"\r\n|     \"net/http\"\r\n| )\r\n|\r\n| func main() {\r\n|     addr := flag.String(\"addr\", \":3000\", \"the addr of the service\")\r\n|     flag.Parse()\r\n|     http.HandleFunc(\"/\", handler)\r\n|     log.Fatal(http.ListenAndServe(*addr, nil))\r\n|     log.Printf(\"Listening on %s\", *addr)\r\n| }\r\n|\r\n| func handler(w http.ResponseWriter, r *http.Request) {\r\n|     log.Printf(\"%s %s\", r.Method, r.URL.Path)\r\n+     fmt.Fprintf(w, \"Let's go!\")\r\n| }","> Dockerfile\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .","> Dockerfile\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .\r\n|\r\n# # Run container\r\n$ docker run my-service -addr=:4000","> Dockerfile\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .\r\n|\r\n# # Run container\r\n$ docker run my-service -addr=:4000\r\n|\r\n# # Call service\r\n+ curl localhost:4000","- (╯°□°）╯︵ ┻━┻\r\n- WTF, THERE IS NO OUTPUT!","- (╯°□°）╯︵ ┻━┻\r\n- WTF, THERE IS NO OUTPUT!\r\n|\r\n# # NOTE: The container ports are isolated\r\n# #       from the operating system ports!","> Dockerfile\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .\r\n|\r\n# # Run container\r\n- docker run my-service -addr=:4000\r\n# # Publish port 4000 from the container to the OS\r\n+ docker run -p 4000:4000 my-service -addr=:4000\r\n|\r\n# # Call service\r\n$ curl localhost:4000","> Dockerfile\r\n|\r\n# # Build image again\r\n$ docker build --tag my-service .\r\n|\r\n# # Run container\r\n$ docker run -p 4000:4000 my-service -addr=:4000\r\n|\r\n# # Call service\r\n$ curl localhost:4000\r\n+ Let's go!","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN go build\r\n# # Specify that container is expected to be exposed on port 3000\r\n# # But you can expose the container on a different port, anyways\r\n+ EXPOSE 3000\r\n| ENTRYPOINT [\"./service\"]\r\n| CMD [\"-addr=:3000\"]","$ ./2-TUTORIAL\r\n|\r\n# ✔ Create an executable in `go`.\r\n# ✔ Write a `Dockerfile`.\r\n+ ✔ Implement a server in `go`.\r\n# # Write a multi-stage `Dockerfile`.","> Dockerfile\r\n|\r\n# # Name build image\r\n- FROM golang:1.9-alpine3.6\r\n+ FROM golang:1.9-alpine3.6 AS build\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN go build\r\n+\r\n# # Name runtime image\r\n+ FROM alpine:3.6\r\n| EXPOSE 3000\r\n| ENTRYPOINT [\"./service\"]\r\n| CMD [\"-addr=:3000\"]","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6 AS build\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN go build\r\n|\r\n| FROM alpine:3.6\r\n+ WORKDIR /service\r\n| EXPOSE 3000\r\n| ENTRYPOINT [\"./service\"]\r\n| CMD [\"-addr=:3000\"]","> Dockerfile\r\n|\r\n| FROM golang:1.9-alpine3.6 AS build\r\n| WORKDIR /service\r\n| COPY . .\r\n| RUN go build\r\n|\r\n| FROM alpine:3.6\r\n| WORKDIR /service\r\n# # Copy executable from build image\r\n# # to runtime image\r\n+ COPY --from=build /service .\r\n| EXPOSE 3000\r\n| ENTRYPOINT [\"./service\"]\r\n| CMD [\"-addr=:3000\"]","$ ./2-TUTORIAL\r\n|\r\n# ✔ Create an executable in `go`.\r\n# ✔ Write a `Dockerfile`.\r\n# ✔ Implement a server in `go`.\r\n+ ✔ Write a multi-stage `Dockerfile`.","$ ./THE-END"]